%% 
% The main goal of this script is to:
%% 
% * Generate a properly spectrogram of the acquired signal by the _Data Acquisiton 
% Toolbox_ and compare it to the one generated by PRAAT.

clc
clear

% Load both signals:
[audio_from_daq, Fs] = audioread("audio_1.wav");

% From the acquired signals compute the acquiring interval:
t_span = 0:1/Fs:((length(audio_from_daq) - 1) / Fs);
%% 
% Some parameters are necessary to be define regarding the spectrogram. In PRAAT 
% the user define the length in time of the spectrogram sliding window. To generate 
% the most similar spectrogram, this notation will be used in this script. Also, 
% the window type is defined (i.g. hamming, rectangular, so on).

window_time_span = 5e-2; % In seconds

% Convert the window length in seconds to window lenght in number of
% samples (MATLAB notation):
L = window_time_span * Fs;
% Select the desired sliding window format:
window = hamming(L);
%% 
% After loading the signal and defining the spectrogram parameters, the next 
% step is to directly generate it through MATLAB's spectrogram() function.

% Create a plot window:
figure()
sgtitle("Acquired signal amplitude and its spectrogram.")

% Plot the acquired signal amplitude:
subplot(2, 1, 1)
plot(t_span, audio_from_daq)
xlim([0, t_span(end)])
ylim([-1, 1])

% Plot the spectogram:
subplot(2, 1, 2)
colormap gray;
spectrogram(audio_from_daq, window, "yaxis",[],[],Fs);
title("Spectogram")
xlabel("Time /[s]")
ylabel("Frequency /[kHz]")
% Define the spectrogram frequency limits:
fmax = 1; % in kHz
fmin = 0; % in kHz
ylim([fmin, fmax])

%%

figure()
colormap(flipud(gray));
spectrogram(audio_from_daq, window, "yaxis",[],[],Fs);
xlabel("Time /[s]")
ylabel("Frequency /[kHz]")
% Define the spectrogram frequency limits:
fmax = 1; % in kHz
fmin = 0; % in kHz
ylim([fmin, fmax])